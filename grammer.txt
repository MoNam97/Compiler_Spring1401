Program -> Statements
Statements -> Statement ; Statements
Statements -> ''
Statement -> Compound_stmt
Statement -> Simple_stmt
Simple_stmt -> Assignment_Call
Simple_stmt -> Return_stmt
Simple_stmt -> Global_stmt
Simple_stmt -> break #JEndLoop
Simple_stmt -> continue #JStartLoop
Compound_stmt -> Function_def
Compound_stmt -> If_stmt
Compound_stmt -> Iteration_stmt
Assignment_Call -> #PID ID B
B -> = C
B -> #LIST_TYPE [ Expression #LIST_OFFSET ] = C
B -> ( Arguments )
C -> Expression #ASSIGN
C -> #LIST_TYPE [ Expression #LIST_ASSIGN List_Rest ] #LIST_END_ASSIGN
List_Rest -> , Expression #LIST_ASSIGN List_Rest
List_Rest -> ''	
Return_stmt -> return Return_Value #FuncJBack
Return_Value -> Expression #FuncStoreRV
Return_Value -> ''	
Global_stmt -> global #GID ID	
Function_def -> def #DefFunc ID ( Params ) : Statements #FuncEnd
Params -> #FuncPID ID Params_Prime
Params -> ''	
Params_Prime -> , #FuncPID ID Params_Prime
Params_Prime -> ''	
If_stmt -> if Relational_Expression #JFalse : Statements #JHere Else_block #Eif		????
Else_block -> else : Statements
Else_block -> ''
Iteration_stmt -> while #StartLoop ( Relational_Expression ) #CheckCond Statements  #EndLoop
Relational_Expression -> Expression #SaveRelop Relop Expression #RelopAct
Relop -> ==
Relop -> <
Expression -> Term Expression_Prime
Expression_Prime -> + Term Expression_Prime #ADD
Expression_Prime -> - Term Expression_Prime #SUB
Expression_Prime -> ''
Term -> Factor Term_Prime
Term_Prime -> * Factor Term_Prime #MULT
Term_Prime -> ''
Factor -> Atom Power
Power -> ** Factor #Power
Power -> Primary
Primary -> [#LIST_TYPE Expression #LIST_OFFSET] Primary
Primary -> (#FuncCallStart Arguments  #FuncCallEnd) Primary
Primary -> ''
Arguments -> Expression #FuncSaveArgs Arguments_Prime
Arguments -> ''
Arguments_Prime -> , Expression #FuncSaveArgs  Arguments_Prime
Arguments_Prime -> ''
Atom -> #PID2 ID
Atom -> #PNUM NUM